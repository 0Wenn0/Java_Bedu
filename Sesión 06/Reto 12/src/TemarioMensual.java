import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Collections;
import java.util.Comparator;

// Clase Tema que implementa Comparable para ordenar alfab√©ticamente
class Tema implements Comparable<Tema> {
    private String titulo;
    private int prioridad; // 1 = urgente, 2 = importante, 3 = opcional

    public Tema(String titulo, int prioridad) {
        this.titulo = titulo;
        this.prioridad = prioridad;
    }

    public String getTitulo() {
        return titulo;
    }

    public int getPrioridad() {
        return prioridad;
    }

    // Orden natural por t√≠tulo
    @Override
    public int compareTo(Tema otro) {
        return this.titulo.compareToIgnoreCase(otro.titulo);
    }

    @Override
    public String toString() {
        return "üìò Tema: " + titulo + " | Prioridad: " + prioridad;
    }
}

public class TemarioMensual {
    public static void main(String[] args) {

        // CopyOnWriteArrayList: lista segura de temas activos
        CopyOnWriteArrayList<Tema> temas = new CopyOnWriteArrayList<>();

        temas.add(new Tema("Lectura comprensiva", 2));
        temas.add(new Tema("Matem√°ticas b√°sicas", 1));
        temas.add(new Tema("Cuidado del medio ambiente", 3));
        temas.add(new Tema("Educaci√≥n emocional", 2));

        // ConcurrentHashMap: repositorio compartido de recursos
        ConcurrentHashMap<String, String> recursos = new ConcurrentHashMap<>();

        recursos.put("Lectura comprensiva", "https://recursos.edu/lectura");
        recursos.put("Matem√°ticas b√°sicas", "https://recursos.edu/mate");
        recursos.put("Cuidado del medio ambiente", "https://recursos.edu/medioambiente");
        recursos.put("Educaci√≥n emocional", "https://recursos.edu/emociones");

        // üî§ Ordenar por t√≠tulo (orden natural - Comparable)
        Collections.sort(temas);
        System.out.println("üìö Temas ordenados alfab√©ticamente:");
        for (Tema t : temas) {
            System.out.println(t);
        }

        // üî¢ Ordenar por prioridad (Comparator)
        temas.sort(Comparator.comparingInt(Tema::getPrioridad));
        System.out.println("\n‚ö†Ô∏è Temas ordenados por prioridad:");
        for (Tema t : temas) {
            System.out.println(t);
        }

        // Mostrar recursos asociados
        System.out.println("\nüîó Repositorio de recursos por tema:");
        for (String titulo : recursos.keySet()) {
            System.out.println("üî∏ " + titulo + " ‚Üí " + recursos.get(titulo));
        }
    }
}
